---
# Source: postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    app.kubernetes.io/component: primary
  annotations:
    app.uw.systems/description: ""
    app.uw.systems/repos: https://github.com/utilitywarehouse/shared-kustomize-bases/tree/main/postgresql
    app.uw.systems/tier: ""
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  labels:
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    app.kubernetes.io/component: primary
  annotations:
    app.uw.systems/description: ""
    app.uw.systems/repos: https://github.com/utilitywarehouse/shared-kustomize-bases/tree/main/postgresql
    app.uw.systems/tier: ""
spec:
  replicas: 1
  serviceName: postgresql
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: postgresql
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: postgresql
      labels:
        app.kubernetes.io/instance: postgresql
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default

      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: postgresql
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-12-r5
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              valueFrom:
                configMapKeyRef:
                  name: postgresql
                  key: port
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgresql
                  key: user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: user-password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: password
            - name: POSTGRES_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: postgresql
                  key: database
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  exec pg_isready -U "postgres" -d "dbname=$(POSTGRES_DATABASE)" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=$(POSTGRES_DATABASE)" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 0
              memory: 0
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
        - name: metrics
          image: docker.io/bitnami/postgres-exporter:0.15.0-debian-12-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          args:
            - --no-collector.wal
          env:
            - name: POSTGRES_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: postgresql
                  key: database
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: postgresql
                  key: host
            - name: DATA_SOURCE_URI
              value: $(POSTGRES_HOST):5432/$(POSTGRES_DATABASE)?sslmode=disable
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: user-password
            - name: DATA_SOURCE_USER
              valueFrom:
                configMapKeyRef:
                  name: postgresql
                  key: user
          ports:
            - name: http-metrics
              containerPort: 9187
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http-metrics
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http-metrics
          volumeMounts:
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
